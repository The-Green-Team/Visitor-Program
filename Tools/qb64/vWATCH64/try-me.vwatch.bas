'--------------------------------------------------------------------------------
'vWATCH64 initialization code - version 1.103:
'--------------------------------------------------------------------------------
DECLARE LIBRARY
    FUNCTION vwatch64_GETPID& ALIAS getpid ()
END DECLARE

DECLARE LIBRARY "timers"
    SUB VWATCH64_STOPTIMERS ALIAS stop_timers
    SUB VWATCH64_STARTTIMERS ALIAS start_timers
END DECLARE

CONST vwatch64_ID = "vWATCH64"
CONST vwatch64_VERSION = "1.103"
CONST vwatch64_CHECKSUM = "2534E945"
CONST vwatch64_FILENAME = "C:\qb64\vwatch64.dat"

'Breakpoint control:
CONST vwatch64_CONTINUE = 1
CONST vwatch64_NEXTSTEP = 2
CONST vwatch64_READY = 3
CONST vwatch64_SETVAR = 4
CONST vwatch64_SKIPSUB = 5
CONST vwatch64_SETNEXT = 7

TYPE vwatch64_HEADERTYPE
    CLIENT_ID AS STRING * 8
    VERSION AS STRING * 5
    CONNECTED AS _BYTE
    RESPONSE AS _BYTE
    PID AS LONG
END TYPE

TYPE vwatch64_CLIENTTYPE
    NAME AS STRING * 256
    CHECKSUM AS STRING * 8
    TOTALSOURCELINES AS LONG
    EXENAME AS STRING * 256
    LINENUMBER AS LONG
    TOTALVARIABLES AS LONG
    PID AS LONG
END TYPE

TYPE vwatch64_BREAKPOINTTYPE
    ACTION AS _BYTE
    LINENUMBER AS LONG
END TYPE


TYPE vwatch64_VARIABLESTYPE
    NAME AS STRING * 256
    SCOPE AS STRING * 50
    UDT AS STRING * 40
    DATATYPE AS STRING * 20
END TYPE

TYPE vwatch64_VARIABLEVALUETYPE
    VALUE AS STRING * 256
END TYPE

DIM SHARED vwatch64_BREAKPOINT AS vwatch64_BREAKPOINTTYPE
DIM SHARED vwatch64_WATCHPOINTCOMMAND AS vwatch64_BREAKPOINTTYPE
DIM SHARED vwatch64_WATCHPOINTCOMMANDBLOCK AS LONG
DIM SHARED vwatch64_BREAKPOINTBLOCK AS LONG
DIM SHARED vwatch64_BREAKPOINTLISTBLOCK AS LONG
DIM SHARED vwatch64_BREAKPOINTLIST AS STRING * 89
DIM SHARED vwatch64_CLIENT AS vwatch64_CLIENTTYPE
DIM SHARED vwatch64_CLIENTBLOCK AS LONG
DIM SHARED vwatch64_CLIENTFILE AS INTEGER
DIM SHARED vwatch64_DATAINFOBLOCK AS LONG
DIM SHARED vwatch64_DATABLOCK AS LONG
DIM SHARED vwatch64_EXCHANGEBLOCK AS LONG
DIM SHARED vwatch64_WATCHPOINTLISTBLOCK AS LONG
DIM SHARED vwatch64_WATCHPOINTEXPBLOCK AS LONG
DIM SHARED vwatch64_HEADER AS vwatch64_HEADERTYPE
DIM SHARED vwatch64_HEADERBLOCK AS LONG
DIM SHARED vwatch64_USERQUIT AS _BYTE
DIM SHARED vwatch64_NEXTLINE AS LONG
DIM SHARED vwatch64_SUBLEVEL AS INTEGER
DIM SHARED vwatch64_TARGETVARINDEX AS LONG
DIM SHARED vwatch64_TIMER AS INTEGER
DIM SHARED vwatch64_EXCHANGEDATASIZE$4
DIM SHARED vwatch64_EXCHANGEDATA AS STRING
DIM SHARED vWATCH64_DUMMY%%

DIM SHARED vwatch64_VARIABLES(1 TO 26) AS vwatch64_VARIABLESTYPE
DIM SHARED vwatch64_VARIABLEDATA(1 TO 26) AS vwatch64_VARIABLEVALUETYPE
DIM SHARED vwatch64_WATCHPOINTLIST AS STRING * 26
DIM SHARED vwatch64_WATCHPOINT(1 TO 26) AS vwatch64_VARIABLEVALUETYPE
vwatch64_VARIABLES(1).NAME = "yname"
vwatch64_VARIABLES(1).SCOPE = "MAIN MODULE"
vwatch64_VARIABLES(1).DATATYPE = "STRING"
vwatch64_VARIABLES(2).NAME = "a"
vwatch64_VARIABLES(2).SCOPE = "SHARED"
vwatch64_VARIABLES(2).DATATYPE = "STRING"
vwatch64_VARIABLES(3).NAME = "fe(0)"
vwatch64_VARIABLES(3).SCOPE = "SHARED"
vwatch64_VARIABLES(3).DATATYPE = "STRING"
vwatch64_VARIABLES(4).NAME = "fe(1)"
vwatch64_VARIABLES(4).SCOPE = "SHARED"
vwatch64_VARIABLES(4).DATATYPE = "STRING"
vwatch64_VARIABLES(5).NAME = "fe(2)"
vwatch64_VARIABLES(5).SCOPE = "SHARED"
vwatch64_VARIABLES(5).DATATYPE = "STRING"
vwatch64_VARIABLES(6).NAME = "fe(3)"
vwatch64_VARIABLES(6).SCOPE = "SHARED"
vwatch64_VARIABLES(6).DATATYPE = "STRING"
vwatch64_VARIABLES(7).NAME = "fe(4)"
vwatch64_VARIABLES(7).SCOPE = "SHARED"
vwatch64_VARIABLES(7).DATATYPE = "STRING"
vwatch64_VARIABLES(8).NAME = "fe(5)"
vwatch64_VARIABLES(8).SCOPE = "SHARED"
vwatch64_VARIABLES(8).DATATYPE = "STRING"
vwatch64_VARIABLES(9).NAME = "text$"
vwatch64_VARIABLES(9).SCOPE = "FUNCTION Revert$"
vwatch64_VARIABLES(9).DATATYPE = "STRING"
vwatch64_VARIABLES(10).NAME = "i"
vwatch64_VARIABLES(10).SCOPE = "FUNCTION Revert$"
vwatch64_VARIABLES(10).DATATYPE = "LONG"
vwatch64_VARIABLES(11).NAME = "temp$"
vwatch64_VARIABLES(11).SCOPE = "FUNCTION Revert$"
vwatch64_VARIABLES(11).DATATYPE = "STRING"
vwatch64_VARIABLES(12).NAME = "r"
vwatch64_VARIABLES(12).SCOPE = "SUB TakeABreak"
vwatch64_VARIABLES(12).DATATYPE = "INTEGER"
vwatch64_VARIABLES(13).NAME = "NoOfBreaks"
vwatch64_VARIABLES(13).SCOPE = "SUB TakeABreak"
vwatch64_VARIABLES(13).DATATYPE = "LONG"
vwatch64_VARIABLES(14).NAME = "my_pid"
vwatch64_VARIABLES(14).SCOPE = "MAIN MODULE"
vwatch64_VARIABLES(14).DATATYPE = "LONG"
vwatch64_VARIABLES(15).NAME = "tempo"
vwatch64_VARIABLES(15).SCOPE = "MAIN MODULE"
vwatch64_VARIABLES(15).DATATYPE = "LONG"
vwatch64_VARIABLES(16).NAME = "LeftForLOOP"
vwatch64_VARIABLES(16).SCOPE = "MAIN MODULE"
vwatch64_VARIABLES(16).DATATYPE = "LONG"
vwatch64_VARIABLES(17).NAME = "j"
vwatch64_VARIABLES(17).SCOPE = "MAIN MODULE"
vwatch64_VARIABLES(17).DATATYPE = "LONG"
vwatch64_VARIABLES(18).NAME = "used$6"
vwatch64_VARIABLES(18).SCOPE = "MAIN MODULE"
vwatch64_VARIABLES(18).DATATYPE = "STRING"
vwatch64_VARIABLES(19).NAME = "x"
vwatch64_VARIABLES(19).SCOPE = "MAIN MODULE"
vwatch64_VARIABLES(19).DATATYPE = "LONG"
vwatch64_VARIABLES(20).NAME = "y"
vwatch64_VARIABLES(20).SCOPE = "MAIN MODULE"
vwatch64_VARIABLES(20).DATATYPE = "LONG"
vwatch64_VARIABLES(21).NAME = "i"
vwatch64_VARIABLES(21).SCOPE = "MAIN MODULE"
vwatch64_VARIABLES(21).DATATYPE = "LONG"
vwatch64_VARIABLES(22).NAME = "k$"
vwatch64_VARIABLES(22).SCOPE = "MAIN MODULE"
vwatch64_VARIABLES(22).DATATYPE = "STRING"
vwatch64_VARIABLES(23).NAME = "temp"
vwatch64_VARIABLES(23).SCOPE = "MAIN MODULE"
vwatch64_VARIABLES(23).DATATYPE = "LONG"
vwatch64_VARIABLES(24).NAME = "used`8"
vwatch64_VARIABLES(24).SCOPE = "MAIN MODULE"
vwatch64_VARIABLES(24).DATATYPE = "_BIT"
vwatch64_VARIABLES(25).NAME = "strayDog"
vwatch64_VARIABLES(25).SCOPE = "MAIN MODULE"
vwatch64_VARIABLES(25).DATATYPE = "LONG"
vwatch64_VARIABLES(26).NAME = "tiempo#"
vwatch64_VARIABLES(26).SCOPE = "MAIN MODULE"
vwatch64_VARIABLES(26).DATATYPE = "DOUBLE"

vwatch64_HEADERBLOCK = 1
vwatch64_CLIENTBLOCK = LEN(vwatch64_HEADER) + 1
vwatch64_BREAKPOINTBLOCK = vwatch64_CLIENTBLOCK + LEN(vwatch64_CLIENT) + 1
vwatch64_BREAKPOINTLISTBLOCK = vwatch64_BREAKPOINTBLOCK + LEN(vwatch64_BREAKPOINT) + 1
vwatch64_DATAINFOBLOCK = vwatch64_BREAKPOINTLISTBLOCK + LEN(vwatch64_BREAKPOINTLIST) + 1
vwatch64_DATABLOCK = vwatch64_DATAINFOBLOCK + LEN(vwatch64_VARIABLES()) + 1
vwatch64_WATCHPOINTLISTBLOCK = vwatch64_DATABLOCK + LEN(vwatch64_VARIABLEDATA()) + 1
vwatch64_WATCHPOINTEXPBLOCK = vwatch64_WATCHPOINTLISTBLOCK + LEN(vwatch64_WATCHPOINTLIST) + 1
vwatch64_WATCHPOINTCOMMANDBLOCK = vwatch64_WATCHPOINTEXPBLOCK + LEN(vwatch64_WATCHPOINT()) + 1
vwatch64_EXCHANGEBLOCK = vwatch64_WATCHPOINTCOMMANDBLOCK + LEN(vwatch64_WATCHPOINTCOMMAND) + 1

vwatch64_CONNECTTOHOST

'Initialize the data export timer:
vwatch64_TIMER = _FREETIMER
ON TIMER(vwatch64_TIMER, .1) vwatch64_VARIABLEWATCH
TIMER(vwatch64_TIMER) ON

'--------------------------------------------------------------------------------
'End of vWATCH64 initialization code.
'--------------------------------------------------------------------------------

'Pointless code, made just for testing vWATCH64
'After you compile vWATCH64, drag this .bas file into vwatch.exe
'to trace its execution, run it line by line and also monitor
'the values of the variables below in real time.
'
DECLARE LIBRARY
    FUNCTION getpid ()
END DECLARE

_DEFINE A-Z AS LONG
$IF WIN THEN
    CONST PathSep$ = "\"
$ELSE
    CONST PathSep$="/"
$END IF
CONST True = -1: CONST False = NOT True

DIM yname AS STRING
DIM SHARED a AS STRING, fe(0 TO 5) AS STRING * 10

vwatch64_LABEL_21:::: vwatch64_NEXTLINE = vwatch64_CHECKBREAKPOINT(21): IF vwatch64_NEXTLINE > 0 THEN GOTO vwatch64_SETNEXTLINE ELSE IF vwatch64_NEXTLINE = -2 THEN GOTO vwatch64_SKIP_21 ELSE IF vwatch64_NEXTLINE = -1 THEN GOSUB vwatch64_SETVARIABLE: GOTO vwatch64_LABEL_21
my_pid = getpid
vwatch64_SKIP_21:::: 
vwatch64_LABEL_22:::: vwatch64_NEXTLINE = vwatch64_CHECKBREAKPOINT(22): IF vwatch64_NEXTLINE > 0 THEN GOTO vwatch64_SETNEXTLINE ELSE IF vwatch64_NEXTLINE = -2 THEN GOTO vwatch64_SKIP_22 ELSE IF vwatch64_NEXTLINE = -1 THEN GOSUB vwatch64_SETVARIABLE: GOTO vwatch64_LABEL_22
CLS
vwatch64_SKIP_22:::: 
vwatch64_LABEL_23:::: vwatch64_NEXTLINE = vwatch64_CHECKBREAKPOINT(23): IF vwatch64_NEXTLINE > 0 THEN GOTO vwatch64_SETNEXTLINE ELSE IF vwatch64_NEXTLINE = -2 THEN GOTO vwatch64_SKIP_23 ELSE IF vwatch64_NEXTLINE = -1 THEN GOSUB vwatch64_SETVARIABLE: GOTO vwatch64_LABEL_23
RANDOMIZE TIMER
vwatch64_SKIP_23:::: 
vwatch64_LABEL_24:::: vwatch64_NEXTLINE = vwatch64_CHECKBREAKPOINT(24): IF vwatch64_NEXTLINE > 0 THEN GOTO vwatch64_SETNEXTLINE ELSE IF vwatch64_NEXTLINE = -2 THEN GOTO vwatch64_SKIP_24 ELSE IF vwatch64_NEXTLINE = -1 THEN GOSUB vwatch64_SETVARIABLE: GOTO vwatch64_LABEL_24
DO: _LIMIT 60
vwatch64_SKIP_24:::: 
vwatch64_LABEL_25:::: vwatch64_NEXTLINE = vwatch64_CHECKBREAKPOINT(25): IF vwatch64_NEXTLINE > 0 THEN GOTO vwatch64_SETNEXTLINE ELSE IF vwatch64_NEXTLINE = -2 THEN GOTO vwatch64_SKIP_25 ELSE IF vwatch64_NEXTLINE = -1 THEN GOSUB vwatch64_SETVARIABLE: GOTO vwatch64_LABEL_25
    RESTORE Names
vwatch64_SKIP_25:::: 
vwatch64_LABEL_26:::: vwatch64_NEXTLINE = vwatch64_CHECKBREAKPOINT(26): IF vwatch64_NEXTLINE > 0 THEN GOTO vwatch64_SETNEXTLINE ELSE IF vwatch64_NEXTLINE = -2 THEN GOTO vwatch64_SKIP_26 ELSE IF vwatch64_NEXTLINE = -1 THEN GOSUB vwatch64_SETVARIABLE: GOTO vwatch64_LABEL_26
    tempo = TIMER
vwatch64_SKIP_26:::: 
vwatch64_LABEL_27:::: vwatch64_NEXTLINE = vwatch64_CHECKBREAKPOINT(27): IF vwatch64_NEXTLINE > 0 THEN GOTO vwatch64_SETNEXTLINE ELSE IF vwatch64_NEXTLINE = -2 THEN GOTO vwatch64_SKIP_27 ELSE IF vwatch64_NEXTLINE = -1 THEN GOSUB vwatch64_SETVARIABLE: GOTO vwatch64_LABEL_27
    LeftForLOOP = False
vwatch64_SKIP_27:::: 
vwatch64_LABEL_28:::: vwatch64_NEXTLINE = vwatch64_CHECKBREAKPOINT(28): IF vwatch64_NEXTLINE > 0 THEN GOTO vwatch64_SETNEXTLINE ELSE IF vwatch64_NEXTLINE = -2 THEN GOTO vwatch64_SKIP_28 ELSE IF vwatch64_NEXTLINE = -1 THEN GOSUB vwatch64_SETVARIABLE: GOTO vwatch64_LABEL_28
    FOR j = 1 TO 10: _LIMIT 10
vwatch64_SKIP_28:::: 
vwatch64_LABEL_29:::: vwatch64_NEXTLINE = vwatch64_CHECKBREAKPOINT(29): IF vwatch64_NEXTLINE > 0 THEN GOTO vwatch64_SETNEXTLINE ELSE IF vwatch64_NEXTLINE = -2 THEN GOTO vwatch64_SKIP_29 ELSE IF vwatch64_NEXTLINE = -1 THEN GOSUB vwatch64_SETVARIABLE: GOTO vwatch64_LABEL_29
        READ a
vwatch64_SKIP_29:::: 
vwatch64_LABEL_30:::: vwatch64_NEXTLINE = vwatch64_CHECKBREAKPOINT(30): IF vwatch64_NEXTLINE > 0 THEN GOTO vwatch64_SETNEXTLINE ELSE IF vwatch64_NEXTLINE = -2 THEN GOTO vwatch64_SKIP_30 ELSE IF vwatch64_NEXTLINE = -1 THEN GOSUB vwatch64_SETVARIABLE: GOTO vwatch64_LABEL_30
        yname = Revert(a)
vwatch64_SKIP_30:::: 
vwatch64_LABEL_31:::: vwatch64_NEXTLINE = vwatch64_CHECKBREAKPOINT(31): IF vwatch64_NEXTLINE > 0 THEN GOTO vwatch64_SETNEXTLINE ELSE IF vwatch64_NEXTLINE = -2 THEN GOTO vwatch64_SKIP_31 ELSE IF vwatch64_NEXTLINE = -1 THEN GOSUB vwatch64_SETVARIABLE: GOTO vwatch64_LABEL_31
        used$6 = a
vwatch64_SKIP_31:::: 
vwatch64_LABEL_32:::: vwatch64_NEXTLINE = vwatch64_CHECKBREAKPOINT(32): IF vwatch64_NEXTLINE > 0 THEN GOTO vwatch64_SETNEXTLINE ELSE IF vwatch64_NEXTLINE = -2 THEN GOTO vwatch64_SKIP_32 ELSE IF vwatch64_NEXTLINE = -1 THEN GOSUB vwatch64_SETVARIABLE: GOTO vwatch64_LABEL_32
        PRINT a;
vwatch64_SKIP_32:::: 
vwatch64_LABEL_33:::: vwatch64_NEXTLINE = vwatch64_CHECKBREAKPOINT(33): IF vwatch64_NEXTLINE > 0 THEN GOTO vwatch64_SETNEXTLINE ELSE IF vwatch64_NEXTLINE = -2 THEN GOTO vwatch64_SKIP_33 ELSE IF vwatch64_NEXTLINE = -1 THEN GOSUB vwatch64_SETVARIABLE: GOTO vwatch64_LABEL_33
        PRINT PathSep$; 'But why? :)
vwatch64_SKIP_33:::: 
vwatch64_LABEL_34:::: vwatch64_NEXTLINE = vwatch64_CHECKBREAKPOINT(34): IF vwatch64_NEXTLINE > 0 THEN GOTO vwatch64_SETNEXTLINE ELSE IF vwatch64_NEXTLINE = -2 THEN GOTO vwatch64_SKIP_34 ELSE IF vwatch64_NEXTLINE = -1 THEN GOSUB vwatch64_SETVARIABLE: GOTO vwatch64_LABEL_34
        x = CSRLIN: y = POS(1)
vwatch64_SKIP_34:::: 
vwatch64_LABEL_35:::: vwatch64_NEXTLINE = vwatch64_CHECKBREAKPOINT(35): IF vwatch64_NEXTLINE > 0 THEN GOTO vwatch64_SETNEXTLINE ELSE IF vwatch64_NEXTLINE = -2 THEN GOTO vwatch64_SKIP_35 ELSE IF vwatch64_NEXTLINE = -1 THEN GOSUB vwatch64_SETVARIABLE: GOTO vwatch64_LABEL_35
        LOCATE 1, 70
vwatch64_SKIP_35:::: 
vwatch64_LABEL_36:::: vwatch64_NEXTLINE = vwatch64_CHECKBREAKPOINT(36): IF vwatch64_NEXTLINE > 0 THEN GOTO vwatch64_SETNEXTLINE ELSE IF vwatch64_NEXTLINE = -2 THEN GOTO vwatch64_SKIP_36 ELSE IF vwatch64_NEXTLINE = -1 THEN GOSUB vwatch64_SETVARIABLE: GOTO vwatch64_LABEL_36
        PRINT my_pid
vwatch64_SKIP_36:::: 
vwatch64_LABEL_37:::: vwatch64_NEXTLINE = vwatch64_CHECKBREAKPOINT(37): IF vwatch64_NEXTLINE > 0 THEN GOTO vwatch64_SETNEXTLINE ELSE IF vwatch64_NEXTLINE = -2 THEN GOTO vwatch64_SKIP_37 ELSE IF vwatch64_NEXTLINE = -1 THEN GOSUB vwatch64_SETVARIABLE: GOTO vwatch64_LABEL_37
        LOCATE x, y
vwatch64_SKIP_37:::: 
vwatch64_LABEL_38:::: vwatch64_NEXTLINE = vwatch64_CHECKBREAKPOINT(38): IF vwatch64_NEXTLINE > 0 THEN GOTO vwatch64_SETNEXTLINE ELSE IF vwatch64_NEXTLINE = -2 THEN GOTO vwatch64_SKIP_38 ELSE IF vwatch64_NEXTLINE = -1 THEN GOSUB vwatch64_SETVARIABLE: GOTO vwatch64_LABEL_38
        i = _CEIL(RND * 100000)
vwatch64_SKIP_38:::: 
vwatch64_LABEL_39:::: vwatch64_NEXTLINE = vwatch64_CHECKBREAKPOINT(39): IF vwatch64_NEXTLINE > 0 THEN GOTO vwatch64_SETNEXTLINE ELSE IF vwatch64_NEXTLINE = -2 THEN GOTO vwatch64_SKIP_39 ELSE IF vwatch64_NEXTLINE = -1 THEN GOSUB vwatch64_SETVARIABLE: GOTO vwatch64_LABEL_39
        k$ = INKEY$
vwatch64_SKIP_39:::: 
vwatch64_LABEL_40:::: vwatch64_NEXTLINE = vwatch64_CHECKBREAKPOINT(40): IF vwatch64_NEXTLINE > 0 THEN GOTO vwatch64_SETNEXTLINE ELSE IF vwatch64_NEXTLINE = -2 THEN GOTO vwatch64_SKIP_40 ELSE IF vwatch64_NEXTLINE = -1 THEN GOSUB vwatch64_SETVARIABLE: GOTO vwatch64_LABEL_40
        fe(temp) = a
vwatch64_SKIP_40:::: 
vwatch64_LABEL_41:::: vwatch64_NEXTLINE = vwatch64_CHECKBREAKPOINT(41): IF vwatch64_NEXTLINE > 0 THEN GOTO vwatch64_SETNEXTLINE ELSE IF vwatch64_NEXTLINE = -2 THEN GOTO vwatch64_SKIP_41 ELSE IF vwatch64_NEXTLINE = -1 THEN GOSUB vwatch64_SETVARIABLE: GOTO vwatch64_LABEL_41
        temp = temp + 1: IF temp > UBOUND(fe) THEN temp = 0: _
            used$6 = "RESET!": _
            tempo = 0
vwatch64_SKIP_41:::: 
vwatch64_LABEL_44:::: vwatch64_NEXTLINE = vwatch64_CHECKBREAKPOINT(44): IF vwatch64_NEXTLINE > 0 THEN GOTO vwatch64_SETNEXTLINE ELSE IF vwatch64_NEXTLINE = -2 THEN GOTO vwatch64_SKIP_44 ELSE IF vwatch64_NEXTLINE = -1 THEN GOSUB vwatch64_SETVARIABLE: GOTO vwatch64_LABEL_44
        IF k$ = CHR$(27) THEN EXIT DO
vwatch64_SKIP_44:::: 
vwatch64_LABEL_45:::: vwatch64_NEXTLINE = vwatch64_CHECKBREAKPOINT(45): IF vwatch64_NEXTLINE > 0 THEN GOTO vwatch64_SETNEXTLINE ELSE IF vwatch64_NEXTLINE = -2 THEN GOTO vwatch64_SKIP_45 ELSE IF vwatch64_NEXTLINE = -1 THEN GOSUB vwatch64_SETVARIABLE: GOTO vwatch64_LABEL_45
    NEXT j
vwatch64_SKIP_45:::: 
vwatch64_LABEL_46:::: vwatch64_NEXTLINE = vwatch64_CHECKBREAKPOINT(46): IF vwatch64_NEXTLINE > 0 THEN GOTO vwatch64_SETNEXTLINE ELSE IF vwatch64_NEXTLINE = -2 THEN GOTO vwatch64_SKIP_46 ELSE IF vwatch64_NEXTLINE = -1 THEN GOSUB vwatch64_SETVARIABLE: GOTO vwatch64_LABEL_46
    LeftForLOOP = True
vwatch64_SKIP_46:::: 
    'VWATCH64:OFF
    used`8 = tiempo#
    strayDog = strayDog + 1
    PRINT strayDog
    tiempo# = TIMER
    PRINT
    PRINT tiempo# - tempo
    'VWATCH64:ON
vwatch64_LABEL_55:::: vwatch64_NEXTLINE = vwatch64_CHECKBREAKPOINT(55): IF vwatch64_NEXTLINE > 0 THEN GOTO vwatch64_SETNEXTLINE ELSE IF vwatch64_NEXTLINE = -2 THEN GOTO vwatch64_SKIP_55 ELSE IF vwatch64_NEXTLINE = -1 THEN GOSUB vwatch64_SETVARIABLE: GOTO vwatch64_LABEL_55
    TakeABreak
vwatch64_SKIP_55:::: 
vwatch64_LABEL_56:::: vwatch64_NEXTLINE = vwatch64_CHECKBREAKPOINT(56): IF vwatch64_NEXTLINE > 0 THEN GOTO vwatch64_SETNEXTLINE ELSE IF vwatch64_NEXTLINE = -2 THEN GOTO vwatch64_SKIP_56 ELSE IF vwatch64_NEXTLINE = -1 THEN GOSUB vwatch64_SETVARIABLE: GOTO vwatch64_LABEL_56
LOOP
vwatch64_SKIP_56:::: 

vwatch64_LABEL_58:::: vwatch64_NEXTLINE = vwatch64_CHECKBREAKPOINT(58): IF vwatch64_NEXTLINE > 0 THEN GOTO vwatch64_SETNEXTLINE ELSE IF vwatch64_NEXTLINE = -2 THEN GOTO vwatch64_SKIP_58 ELSE IF vwatch64_NEXTLINE = -1 THEN GOSUB vwatch64_SETVARIABLE: GOTO vwatch64_LABEL_58
Names:
vwatch64_SKIP_58:::: 
DATA "qb64 ","is ","one "
DATA "cool ","project ","which "
DATA "i ","really ","love ",playing with

'*INCLUDE file merged: 'try-me-routines.bas'
IF vwatch64_HEADER.CONNECTED THEN
    vwatch64_HEADER.CONNECTED = 0
    PUT #vwatch64_CLIENTFILE, 1, vwatch64_HEADER
END IF
CLOSE #vwatch64_CLIENTFILE
ON ERROR GOTO vwatch64_FILEERROR
KILL vwatch64_FILENAME

END
vwatch64_FILEERROR:
RESUME NEXT

vwatch64_CLIENTFILEERROR:
IF vwatch64_HEADER.CONNECTED THEN OPEN vwatch64_FILENAME FOR BINARY AS vwatch64_CLIENTFILE
RESUME

vwatch64_SETNEXTLINE:
SELECT CASE vwatch64_NEXTLINE
    CASE 21: GOTO vwatch64_LABEL_21
    CASE 22: GOTO vwatch64_LABEL_22
    CASE 23: GOTO vwatch64_LABEL_23
    CASE 24: GOTO vwatch64_LABEL_24
    CASE 25: GOTO vwatch64_LABEL_25
    CASE 26: GOTO vwatch64_LABEL_26
    CASE 27: GOTO vwatch64_LABEL_27
    CASE 28: GOTO vwatch64_LABEL_28
    CASE 29: GOTO vwatch64_LABEL_29
    CASE 30: GOTO vwatch64_LABEL_30
    CASE 31: GOTO vwatch64_LABEL_31
    CASE 32: GOTO vwatch64_LABEL_32
    CASE 33: GOTO vwatch64_LABEL_33
    CASE 34: GOTO vwatch64_LABEL_34
    CASE 35: GOTO vwatch64_LABEL_35
    CASE 36: GOTO vwatch64_LABEL_36
    CASE 37: GOTO vwatch64_LABEL_37
    CASE 38: GOTO vwatch64_LABEL_38
    CASE 39: GOTO vwatch64_LABEL_39
    CASE 40: GOTO vwatch64_LABEL_40
    CASE 41: GOTO vwatch64_LABEL_41
    CASE 44: GOTO vwatch64_LABEL_44
    CASE 45: GOTO vwatch64_LABEL_45
    CASE 46: GOTO vwatch64_LABEL_46
    CASE 55: GOTO vwatch64_LABEL_55
    CASE 56: GOTO vwatch64_LABEL_56
    CASE 58: GOTO vwatch64_LABEL_58
END SELECT

vwatch64_SETVARIABLE:
ON ERROR GOTO vwatch64_CLIENTFILEERROR
GET #vwatch64_CLIENTFILE, vwatch64_EXCHANGEBLOCK, vwatch64_EXCHANGEDATASIZE$4
vwatch64_TARGETVARINDEX = CVL(vwatch64_EXCHANGEDATASIZE$4)
GET #vwatch64_CLIENTFILE, , vwatch64_EXCHANGEDATASIZE$4
vwatch64_EXCHANGEDATA = SPACE$(CVL(vwatch64_EXCHANGEDATASIZE$4))
GET #vwatch64_CLIENTFILE, , vwatch64_EXCHANGEDATA
vwatch64_BREAKPOINT.ACTION = vwatch64_READY
PUT #vwatch64_CLIENTFILE, vwatch64_BREAKPOINTBLOCK, vwatch64_BREAKPOINT
ON ERROR GOTO vwatch64_FILEERROR

SELECT CASE vwatch64_TARGETVARINDEX
    CASE 1: yname = vwatch64_EXCHANGEDATA
    CASE 2: a = vwatch64_EXCHANGEDATA
    CASE 3: fe(0) = vwatch64_EXCHANGEDATA
    CASE 4: fe(1) = vwatch64_EXCHANGEDATA
    CASE 5: fe(2) = vwatch64_EXCHANGEDATA
    CASE 6: fe(3) = vwatch64_EXCHANGEDATA
    CASE 7: fe(4) = vwatch64_EXCHANGEDATA
    CASE 8: fe(5) = vwatch64_EXCHANGEDATA
    CASE 14: my_pid = _CV(LONG, vwatch64_EXCHANGEDATA)
    CASE 15: tempo = _CV(LONG, vwatch64_EXCHANGEDATA)
    CASE 16: LeftForLOOP = _CV(LONG, vwatch64_EXCHANGEDATA)
    CASE 17: j = _CV(LONG, vwatch64_EXCHANGEDATA)
    CASE 18: used$6 = vwatch64_EXCHANGEDATA
    CASE 19: x = _CV(LONG, vwatch64_EXCHANGEDATA)
    CASE 20: y = _CV(LONG, vwatch64_EXCHANGEDATA)
    CASE 21: i = _CV(LONG, vwatch64_EXCHANGEDATA)
    CASE 22: k$ = vwatch64_EXCHANGEDATA
    CASE 23: temp = _CV(LONG, vwatch64_EXCHANGEDATA)
    CASE 24: used`8 = _CV(_BIT, vwatch64_EXCHANGEDATA)
    CASE 25: strayDog = _CV(LONG, vwatch64_EXCHANGEDATA)
    CASE 26: tiempo# = _CV(DOUBLE, vwatch64_EXCHANGEDATA)
END SELECT
ON ERROR GOTO 0
RETURN

FUNCTION Revert$ (text$)
    vwatch64_SUBLEVEL = vwatch64_SUBLEVEL + 1
    DIM i AS LONG, temp$

vwatch64_LABEL_67:::: GOSUB vwatch64_VARIABLEWATCH: vwatch64_NEXTLINE = vwatch64_CHECKBREAKPOINT(67): IF vwatch64_NEXTLINE > 0 THEN GOTO vwatch64_SETNEXTLINE ELSE IF vwatch64_NEXTLINE = -2 THEN GOTO vwatch64_SKIP_67 ELSE IF vwatch64_NEXTLINE = -1 THEN GOSUB vwatch64_SETVARIABLE: GOTO vwatch64_LABEL_67
    IF LEN(text$) = 0 THEN vwatch64_SUBLEVEL = vwatch64_SUBLEVEL - 1: EXIT FUNCTION
vwatch64_SKIP_67:::: 

vwatch64_LABEL_69:::: GOSUB vwatch64_VARIABLEWATCH: vwatch64_NEXTLINE = vwatch64_CHECKBREAKPOINT(69): IF vwatch64_NEXTLINE > 0 THEN GOTO vwatch64_SETNEXTLINE ELSE IF vwatch64_NEXTLINE = -2 THEN GOTO vwatch64_SKIP_69 ELSE IF vwatch64_NEXTLINE = -1 THEN GOSUB vwatch64_SETVARIABLE: GOTO vwatch64_LABEL_69
    FOR i = LEN(text$) TO 1 STEP -1
vwatch64_SKIP_69:::: 
vwatch64_LABEL_70:::: GOSUB vwatch64_VARIABLEWATCH: vwatch64_NEXTLINE = vwatch64_CHECKBREAKPOINT(70): IF vwatch64_NEXTLINE > 0 THEN GOTO vwatch64_SETNEXTLINE ELSE IF vwatch64_NEXTLINE = -2 THEN GOTO vwatch64_SKIP_70 ELSE IF vwatch64_NEXTLINE = -1 THEN GOSUB vwatch64_SETVARIABLE: GOTO vwatch64_LABEL_70
        temp$ = temp$ + MID$(text$, i, 1)
vwatch64_SKIP_70:::: 
vwatch64_LABEL_71:::: GOSUB vwatch64_VARIABLEWATCH: vwatch64_NEXTLINE = vwatch64_CHECKBREAKPOINT(71): IF vwatch64_NEXTLINE > 0 THEN GOTO vwatch64_SETNEXTLINE ELSE IF vwatch64_NEXTLINE = -2 THEN GOTO vwatch64_SKIP_71 ELSE IF vwatch64_NEXTLINE = -1 THEN GOSUB vwatch64_SETVARIABLE: GOTO vwatch64_LABEL_71
    NEXT i
vwatch64_SKIP_71:::: 
vwatch64_LABEL_72:::: GOSUB vwatch64_VARIABLEWATCH: vwatch64_NEXTLINE = vwatch64_CHECKBREAKPOINT(72): IF vwatch64_NEXTLINE > 0 THEN GOTO vwatch64_SETNEXTLINE ELSE IF vwatch64_NEXTLINE = -2 THEN GOTO vwatch64_SKIP_72 ELSE IF vwatch64_NEXTLINE = -1 THEN GOSUB vwatch64_SETVARIABLE: GOTO vwatch64_LABEL_72
    Revert$ = temp$
vwatch64_SKIP_72:::: 
vwatch64_LABEL_73:::: GOSUB vwatch64_VARIABLEWATCH: vwatch64_NEXTLINE = vwatch64_CHECKBREAKPOINT(73): IF vwatch64_NEXTLINE > 0 THEN GOTO vwatch64_SETNEXTLINE ELSE IF vwatch64_NEXTLINE = -2 THEN vWATCH64_DUMMY%% = 0 ELSE IF vwatch64_NEXTLINE = -1 THEN GOSUB vwatch64_SETVARIABLE: GOTO vwatch64_LABEL_73
vwatch64_SUBLEVEL = vwatch64_SUBLEVEL - 1
EXIT FUNCTION
vwatch64_SETNEXTLINE:
SELECT CASE vwatch64_NEXTLINE
    CASE 67: GOTO vwatch64_LABEL_67
    CASE 69: GOTO vwatch64_LABEL_69
    CASE 70: GOTO vwatch64_LABEL_70
    CASE 71: GOTO vwatch64_LABEL_71
    CASE 72: GOTO vwatch64_LABEL_72
    CASE 73: GOTO vwatch64_LABEL_73
END SELECT

vwatch64_VARIABLEWATCH:
IF vwatch64_HEADER.CONNECTED = 0 THEN RETURN
ON ERROR GOTO vwatch64_FILEERROR
    vwatch64_VARIABLEDATA(2).VALUE = a
    vwatch64_VARIABLEDATA(3).VALUE = fe(0)
    vwatch64_VARIABLEDATA(4).VALUE = fe(1)
    vwatch64_VARIABLEDATA(5).VALUE = fe(2)
    vwatch64_VARIABLEDATA(6).VALUE = fe(3)
    vwatch64_VARIABLEDATA(7).VALUE = fe(4)
    vwatch64_VARIABLEDATA(8).VALUE = fe(5)
    vwatch64_VARIABLEDATA(9).VALUE = text$
    vwatch64_VARIABLEDATA(10).VALUE = STR$(i)
    vwatch64_VARIABLEDATA(11).VALUE = temp$
ON ERROR GOTO 0
RETURN


vwatch64_SETVARIABLE:
ON ERROR GOTO vwatch64_CLIENTFILEERROR
GET #vwatch64_CLIENTFILE, vwatch64_EXCHANGEBLOCK, vwatch64_EXCHANGEDATASIZE$4
vwatch64_TARGETVARINDEX = CVL(vwatch64_EXCHANGEDATASIZE$4)
GET #vwatch64_CLIENTFILE, , vwatch64_EXCHANGEDATASIZE$4
vwatch64_EXCHANGEDATA = SPACE$(CVL(vwatch64_EXCHANGEDATASIZE$4))
GET #vwatch64_CLIENTFILE, , vwatch64_EXCHANGEDATA
vwatch64_BREAKPOINT.ACTION = vwatch64_READY
PUT #vwatch64_CLIENTFILE, vwatch64_BREAKPOINTBLOCK, vwatch64_BREAKPOINT
ON ERROR GOTO vwatch64_FILEERROR

SELECT CASE vwatch64_TARGETVARINDEX
    CASE 2: a = vwatch64_EXCHANGEDATA
    CASE 3: fe(0) = vwatch64_EXCHANGEDATA
    CASE 4: fe(1) = vwatch64_EXCHANGEDATA
    CASE 5: fe(2) = vwatch64_EXCHANGEDATA
    CASE 6: fe(3) = vwatch64_EXCHANGEDATA
    CASE 7: fe(4) = vwatch64_EXCHANGEDATA
    CASE 8: fe(5) = vwatch64_EXCHANGEDATA
    CASE 9: text$ = vwatch64_EXCHANGEDATA
    CASE 10: i = _CV(LONG, vwatch64_EXCHANGEDATA)
    CASE 11: temp$ = vwatch64_EXCHANGEDATA
END SELECT
GOSUB vwatch64_VARIABLEWATCH
ON ERROR GOTO 0
RETURN
END FUNCTION

SUB TakeABreak
    vwatch64_SUBLEVEL = vwatch64_SUBLEVEL + 1
    DIM r AS INTEGER
    STATIC NoOfBreaks AS LONG

vwatch64_LABEL_79:::: GOSUB vwatch64_VARIABLEWATCH: vwatch64_NEXTLINE = vwatch64_CHECKBREAKPOINT(79): IF vwatch64_NEXTLINE > 0 THEN GOTO vwatch64_SETNEXTLINE ELSE IF vwatch64_NEXTLINE = -2 THEN GOTO vwatch64_SKIP_79 ELSE IF vwatch64_NEXTLINE = -1 THEN GOSUB vwatch64_SETVARIABLE: GOTO vwatch64_LABEL_79
    NoOfBreaks = NoOfBreaks + 1
vwatch64_SKIP_79:::: 
vwatch64_LABEL_80:::: GOSUB vwatch64_VARIABLEWATCH: vwatch64_NEXTLINE = vwatch64_CHECKBREAKPOINT(80): IF vwatch64_NEXTLINE > 0 THEN GOTO vwatch64_SETNEXTLINE ELSE IF vwatch64_NEXTLINE = -2 THEN GOTO vwatch64_SKIP_80 ELSE IF vwatch64_NEXTLINE = -1 THEN GOSUB vwatch64_SETVARIABLE: GOTO vwatch64_LABEL_80
vWATCH64_DUMMY%% = 0 'STOP
vwatch64_SKIP_80:::: 

vwatch64_LABEL_82:::: GOSUB vwatch64_VARIABLEWATCH: vwatch64_NEXTLINE = vwatch64_CHECKBREAKPOINT(82): IF vwatch64_NEXTLINE > 0 THEN GOTO vwatch64_SETNEXTLINE ELSE IF vwatch64_NEXTLINE = -2 THEN GOTO vwatch64_SKIP_82 ELSE IF vwatch64_NEXTLINE = -1 THEN GOSUB vwatch64_SETVARIABLE: GOTO vwatch64_LABEL_82
    DO
vwatch64_SKIP_82:::: 
vwatch64_LABEL_83:::: GOSUB vwatch64_VARIABLEWATCH: vwatch64_NEXTLINE = vwatch64_CHECKBREAKPOINT(83): IF vwatch64_NEXTLINE > 0 THEN GOTO vwatch64_SETNEXTLINE ELSE IF vwatch64_NEXTLINE = -2 THEN GOTO vwatch64_SKIP_83 ELSE IF vwatch64_NEXTLINE = -1 THEN GOSUB vwatch64_SETVARIABLE: GOTO vwatch64_LABEL_83
        RANDOMIZE TIMER
vwatch64_SKIP_83:::: 
vwatch64_LABEL_84:::: GOSUB vwatch64_VARIABLEWATCH: vwatch64_NEXTLINE = vwatch64_CHECKBREAKPOINT(84): IF vwatch64_NEXTLINE > 0 THEN GOTO vwatch64_SETNEXTLINE ELSE IF vwatch64_NEXTLINE = -2 THEN GOTO vwatch64_SKIP_84 ELSE IF vwatch64_NEXTLINE = -1 THEN GOSUB vwatch64_SETVARIABLE: GOTO vwatch64_LABEL_84
        r = _CEIL(RND * 100)
vwatch64_SKIP_84:::: 
vwatch64_LABEL_85:::: GOSUB vwatch64_VARIABLEWATCH: vwatch64_NEXTLINE = vwatch64_CHECKBREAKPOINT(85): IF vwatch64_NEXTLINE > 0 THEN GOTO vwatch64_SETNEXTLINE ELSE IF vwatch64_NEXTLINE = -2 THEN GOTO vwatch64_SKIP_85 ELSE IF vwatch64_NEXTLINE = -1 THEN GOSUB vwatch64_SETVARIABLE: GOTO vwatch64_LABEL_85
        PRINT r
vwatch64_SKIP_85:::: 
vwatch64_LABEL_86:::: GOSUB vwatch64_VARIABLEWATCH: vwatch64_NEXTLINE = vwatch64_CHECKBREAKPOINT(86): IF vwatch64_NEXTLINE > 0 THEN GOTO vwatch64_SETNEXTLINE ELSE IF vwatch64_NEXTLINE = -2 THEN GOTO vwatch64_SKIP_86 ELSE IF vwatch64_NEXTLINE = -1 THEN GOSUB vwatch64_SETVARIABLE: GOTO vwatch64_LABEL_86
        IF r > 50 THEN EXIT DO
vwatch64_SKIP_86:::: 
vwatch64_LABEL_87:::: GOSUB vwatch64_VARIABLEWATCH: vwatch64_NEXTLINE = vwatch64_CHECKBREAKPOINT(87): IF vwatch64_NEXTLINE > 0 THEN GOTO vwatch64_SETNEXTLINE ELSE IF vwatch64_NEXTLINE = -2 THEN GOTO vwatch64_SKIP_87 ELSE IF vwatch64_NEXTLINE = -1 THEN GOSUB vwatch64_SETVARIABLE: GOTO vwatch64_LABEL_87
        IF r = 32 THEN vwatch64_SUBLEVEL = vwatch64_SUBLEVEL - 1: EXIT SUB
vwatch64_SKIP_87:::: 
vwatch64_LABEL_88:::: GOSUB vwatch64_VARIABLEWATCH: vwatch64_NEXTLINE = vwatch64_CHECKBREAKPOINT(88): IF vwatch64_NEXTLINE > 0 THEN GOTO vwatch64_SETNEXTLINE ELSE IF vwatch64_NEXTLINE = -2 THEN GOTO vwatch64_SKIP_88 ELSE IF vwatch64_NEXTLINE = -1 THEN GOSUB vwatch64_SETVARIABLE: GOTO vwatch64_LABEL_88
    LOOP
vwatch64_SKIP_88:::: 
vwatch64_LABEL_89:::: GOSUB vwatch64_VARIABLEWATCH: vwatch64_NEXTLINE = vwatch64_CHECKBREAKPOINT(89): IF vwatch64_NEXTLINE > 0 THEN GOTO vwatch64_SETNEXTLINE ELSE IF vwatch64_NEXTLINE = -2 THEN vWATCH64_DUMMY%% = 0 ELSE IF vwatch64_NEXTLINE = -1 THEN GOSUB vwatch64_SETVARIABLE: GOTO vwatch64_LABEL_89
vwatch64_SUBLEVEL = vwatch64_SUBLEVEL - 1
EXIT SUB
vwatch64_SETNEXTLINE:
SELECT CASE vwatch64_NEXTLINE
    CASE 79: GOTO vwatch64_LABEL_79
    CASE 80: GOTO vwatch64_LABEL_80
    CASE 82: GOTO vwatch64_LABEL_82
    CASE 83: GOTO vwatch64_LABEL_83
    CASE 84: GOTO vwatch64_LABEL_84
    CASE 85: GOTO vwatch64_LABEL_85
    CASE 86: GOTO vwatch64_LABEL_86
    CASE 87: GOTO vwatch64_LABEL_87
    CASE 88: GOTO vwatch64_LABEL_88
    CASE 89: GOTO vwatch64_LABEL_89
END SELECT

vwatch64_VARIABLEWATCH:
IF vwatch64_HEADER.CONNECTED = 0 THEN RETURN
ON ERROR GOTO vwatch64_FILEERROR
    vwatch64_VARIABLEDATA(2).VALUE = a
    vwatch64_VARIABLEDATA(3).VALUE = fe(0)
    vwatch64_VARIABLEDATA(4).VALUE = fe(1)
    vwatch64_VARIABLEDATA(5).VALUE = fe(2)
    vwatch64_VARIABLEDATA(6).VALUE = fe(3)
    vwatch64_VARIABLEDATA(7).VALUE = fe(4)
    vwatch64_VARIABLEDATA(8).VALUE = fe(5)
    vwatch64_VARIABLEDATA(12).VALUE = STR$(r)
    vwatch64_VARIABLEDATA(13).VALUE = STR$(NoOfBreaks)
ON ERROR GOTO 0
RETURN


vwatch64_SETVARIABLE:
ON ERROR GOTO vwatch64_CLIENTFILEERROR
GET #vwatch64_CLIENTFILE, vwatch64_EXCHANGEBLOCK, vwatch64_EXCHANGEDATASIZE$4
vwatch64_TARGETVARINDEX = CVL(vwatch64_EXCHANGEDATASIZE$4)
GET #vwatch64_CLIENTFILE, , vwatch64_EXCHANGEDATASIZE$4
vwatch64_EXCHANGEDATA = SPACE$(CVL(vwatch64_EXCHANGEDATASIZE$4))
GET #vwatch64_CLIENTFILE, , vwatch64_EXCHANGEDATA
vwatch64_BREAKPOINT.ACTION = vwatch64_READY
PUT #vwatch64_CLIENTFILE, vwatch64_BREAKPOINTBLOCK, vwatch64_BREAKPOINT
ON ERROR GOTO vwatch64_FILEERROR

SELECT CASE vwatch64_TARGETVARINDEX
    CASE 2: a = vwatch64_EXCHANGEDATA
    CASE 3: fe(0) = vwatch64_EXCHANGEDATA
    CASE 4: fe(1) = vwatch64_EXCHANGEDATA
    CASE 5: fe(2) = vwatch64_EXCHANGEDATA
    CASE 6: fe(3) = vwatch64_EXCHANGEDATA
    CASE 7: fe(4) = vwatch64_EXCHANGEDATA
    CASE 8: fe(5) = vwatch64_EXCHANGEDATA
    CASE 12: r = _CV(INTEGER, vwatch64_EXCHANGEDATA)
    CASE 13: NoOfBreaks = _CV(LONG, vwatch64_EXCHANGEDATA)
END SELECT
GOSUB vwatch64_VARIABLEWATCH
ON ERROR GOTO 0
RETURN
END SUB


'--------------------------------------------------------------------------------
'vWATCH64 procedures:
'--------------------------------------------------------------------------------
SUB vwatch64_CONNECTTOHOST
    DIM k AS LONG
    DIM Message1$, Message2$, NoGo%
    DIM FileIsOpen%, FileExists%

    vwatch64_CHECKFILE:
    IF _FILEEXISTS(vwatch64_FILENAME) = 0 THEN
        Message1$ = "vWATCH64 doesn't seem to be running."
        Message2$ = "(Checking for 'vwatch64.dat'; ESC to cancel...)"
        IF NOT _SCREENHIDE AND _DEST <> _CONSOLE THEN
            _TITLE "Connecting to vWATCH64..."
            _PRINTSTRING(_WIDTH \ 2 - LEN(Message1$) \ 2, _HEIGHT \ 2), Message1$
            _PRINTSTRING(_WIDTH \ 2 - LEN(Message2$) \ 2, _HEIGHT \ 2 + 1), Message2$
        ELSE
            _CONSOLETITLE "Connecting to vWATCH64..."
            PRINT Message1$: PRINT Message1$
        END IF
        DO: _LIMIT 30
            k = _KEYHIT
            IF k = -27 THEN SYSTEM
            IF _FILEEXISTS(vwatch64_FILENAME) THEN _KEYCLEAR: EXIT DO
        LOOP
    END IF

    vwatch64_CLIENTFILE = 2184
    OPEN vwatch64_FILENAME FOR BINARY AS vwatch64_CLIENTFILE

    'Check if a connection is already active
    IF LOF(vwatch64_CLIENTFILE) > 0 THEN
        'Check if the file can be deleted; if so, vWATCH64 is not running.
        CLOSE #vwatch64_CLIENTFILE
        NoGo% = 0
        ON ERROR GOTO vwatch64_FILEERROR
        KILL vwatch64_FILENAME
        ON ERROR GOTO 0
        NoGo% = _FILEEXISTS(vwatch64_FILENAME)

        IF NoGo% THEN
            CLS
            Message1$ = "ERROR: vWATCH64 is already connected to another"
            Message2$ = "client/debuggee."
            IF NOT _SCREENHIDE AND _DEST <> _CONSOLE THEN
                _TITLE "FAILED!"
                _PRINTSTRING(_WIDTH \ 2 - LEN(Message1$) \ 2, _HEIGHT \ 2), Message1$
                _PRINTSTRING(_WIDTH \ 2 - LEN(Message2$) \ 2, _HEIGHT \ 2 + 1), Message2$
            ELSE
                _CONSOLETITLE "FAILED!"
                PRINT Message1$: PRINT Message1$
            END IF
            END
        END IF
        GOTO vwatch64_CHECKFILE
    ELSEIF LOF(vwatch64_CLIENTFILE) = 0 THEN
        'Check if the file can be deleted; if so, vWATCH64 is not running.
        CLOSE #vwatch64_CLIENTFILE
        ON ERROR GOTO vwatch64_FILEERROR
        KILL vwatch64_FILENAME
        ON ERROR GOTO 0
        IF _FILEEXISTS(vwatch64_FILENAME) = 0 THEN GOTO vwatch64_CHECKFILE
    END IF

    OPEN vwatch64_FILENAME FOR BINARY AS vwatch64_CLIENTFILE
    vwatch64_CLIENT.NAME = "C:\qb64\vWATCH64\try-me.bas"
    vwatch64_CLIENT.CHECKSUM = vwatch64_CHECKSUM
    vwatch64_CLIENT.TOTALSOURCELINES = 89
    vwatch64_CLIENT.TOTALVARIABLES = 26
    vwatch64_CLIENT.PID = vwatch64_GETPID&
    vwatch64_CLIENT.EXENAME = COMMAND$(0)

    'Send this client's version and connection request
    vwatch64_HEADER.CLIENT_ID = vwatch64_ID
    vwatch64_HEADER.VERSION = vwatch64_VERSION
    vwatch64_HEADER.CONNECTED = -1
    PUT #vwatch64_CLIENTFILE, 1, vwatch64_HEADER
    PUT #vwatch64_CLIENTFILE, vwatch64_DATAINFOBLOCK, vwatch64_VARIABLES()

    'Wait for authorization:
    CLS
    Message1$ = "Waiting for authorization; ESC to cancel..."
    IF NOT _SCREENHIDE AND _DEST <> _CONSOLE THEN
        _PRINTSTRING(_WIDTH \ 2 - LEN(Message1$) \ 2, _HEIGHT \ 2), Message1$
    ELSE
        PRINT Message1$
    END IF
    DO: _LIMIT 30
        GET #vwatch64_CLIENTFILE, vwatch64_HEADERBLOCK, vwatch64_HEADER
        k = _KEYHIT
        IF k = -27 THEN SYSTEM
     LOOP UNTIL vwatch64_HEADER.RESPONSE = -1 OR vwatch64_HEADER.CONNECTED = 0

    IF vwatch64_HEADER.CONNECTED = 0 THEN
        SYSTEM
    END IF

    CLS
    IF NOT _SCREENHIDE AND _DEST <> _CONSOLE THEN
        _TITLE "Untitled"
    ELSE
        _CONSOLETITLE "Untitled"
    END IF
    PUT #vwatch64_CLIENTFILE, vwatch64_CLIENTBLOCK, vwatch64_CLIENT
END SUB

SUB vwatch64_VARIABLEWATCH
    SHARED yname AS STRING
    SHARED my_pid
    SHARED tempo
    SHARED LeftForLOOP
    SHARED j
    SHARED used$6
    SHARED x
    SHARED y
    SHARED i
    SHARED k$
    SHARED temp
    SHARED used`8
    SHARED strayDog
    SHARED tiempo#

    IF vwatch64_HEADER.CONNECTED = 0 THEN EXIT SUB
    ON ERROR GOTO vwatch64_FILEERROR
    vwatch64_VARIABLEDATA(1).VALUE = yname
    vwatch64_VARIABLEDATA(2).VALUE = a
    vwatch64_VARIABLEDATA(3).VALUE = fe(0)
    vwatch64_VARIABLEDATA(4).VALUE = fe(1)
    vwatch64_VARIABLEDATA(5).VALUE = fe(2)
    vwatch64_VARIABLEDATA(6).VALUE = fe(3)
    vwatch64_VARIABLEDATA(7).VALUE = fe(4)
    vwatch64_VARIABLEDATA(8).VALUE = fe(5)
    vwatch64_VARIABLEDATA(14).VALUE = STR$(my_pid)
    vwatch64_VARIABLEDATA(15).VALUE = STR$(tempo)
    vwatch64_VARIABLEDATA(16).VALUE = STR$(LeftForLOOP)
    vwatch64_VARIABLEDATA(17).VALUE = STR$(j)
    vwatch64_VARIABLEDATA(18).VALUE = used$6
    vwatch64_VARIABLEDATA(19).VALUE = STR$(x)
    vwatch64_VARIABLEDATA(20).VALUE = STR$(y)
    vwatch64_VARIABLEDATA(21).VALUE = STR$(i)
    vwatch64_VARIABLEDATA(22).VALUE = k$
    vwatch64_VARIABLEDATA(23).VALUE = STR$(temp)
    vwatch64_VARIABLEDATA(24).VALUE = STR$(used`8)
    vwatch64_VARIABLEDATA(25).VALUE = STR$(strayDog)
    vwatch64_VARIABLEDATA(26).VALUE = STR$(tiempo#)
    ON ERROR GOTO vwatch64_CLIENTFILEERROR
    PUT #vwatch64_CLIENTFILE, vwatch64_DATABLOCK, vwatch64_VARIABLEDATA().VALUE
    ON ERROR GOTO 0
END SUB

FUNCTION vwatch64_CHECKBREAKPOINT&(LineNumber AS LONG)
    STATIC FirstRunDone AS _BYTE
    STATIC StepMode AS _BYTE
    STATIC StepAround AS _BYTE
    STATIC StartLevel AS INTEGER
    DIM k AS LONG
    DIM Message1$, Message2$

    IF FirstRunDone = 0 THEN
        IF vwatch64_HEADER.CONNECTED = 0 THEN
            _DELAY .5
            IF NOT _SCREENHIDE AND _DEST <> _CONSOLE THEN
                _TITLE "Untitled"
            ELSE
                _CONSOLETITLE "Untitled"
            END IF
            FirstRunDone = -1
            EXIT FUNCTION
        END IF
    ELSE
        IF vwatch64_HEADER.CONNECTED = 0 THEN EXIT FUNCTION
    END IF

    vwatch64_CLIENT.LINENUMBER = LineNumber
    ON ERROR GOTO vwatch64_CLIENTFILEERROR
    PUT #vwatch64_CLIENTFILE, vwatch64_CLIENTBLOCK, vwatch64_CLIENT

    'Check if step mode was initiated by the host:
    GET #vwatch64_CLIENTFILE, vwatch64_BREAKPOINTBLOCK, vwatch64_BREAKPOINT
    IF vwatch64_BREAKPOINT.ACTION = vwatch64_NEXTSTEP THEN StepMode = -1
    IF vwatch64_BREAKPOINT.ACTION = vwatch64_SKIPSUB THEN StartLevel = vwatch64_SUBLEVEL - 1: StepAround = -1

    GOSUB vwatch64_PING

    'Get the breakpoint list:
    vwatch64_BREAKPOINT.ACTION = vwatch64_READY
    PUT #vwatch64_CLIENTFILE, vwatch64_BREAKPOINTBLOCK, vwatch64_BREAKPOINT
    GET #vwatch64_CLIENTFILE, vwatch64_BREAKPOINTLISTBLOCK, vwatch64_BREAKPOINTLIST

    IF StepAround = -1 AND vwatch64_SUBLEVEL > StartLevel AND (ASC(vwatch64_BREAKPOINTLIST, LineNumber) <> 1) THEN EXIT FUNCTION
    IF StepAround = -1 AND vwatch64_SUBLEVEL = StartLevel THEN StepAround = 0

    vwatch64_VARIABLEWATCH
    IF vwatch64_CHECKWATCHPOINT = -1 THEN StepMode = -1

    'On the first time this procedure is called, execution is halted,
    'until the user presses F5 or F8 in vWATCH64
    IF FirstRunDone = 0 THEN
        Message1$ = "Hit F8 to run line by line or switch to vWATCH64 and hit F5 to run;"
        Message2$ = "(ESC to quit)"
        IF NOT _SCREENHIDE AND _DEST <> _CONSOLE THEN
            _TITLE Message1$
            _PRINTSTRING(_WIDTH \ 2 - LEN(Message1$) \ 2, _HEIGHT \ 2), Message1$
            _PRINTSTRING(_WIDTH \ 2 - LEN(Message2$) \ 2, _HEIGHT \ 2 + 1), Message2$
        ELSE
            _CONSOLETITLE "Switch to vWATCH64 and hit F5 to run or F8 to run line by line;"
        END IF
        VWATCH64_STOPTIMERS
        DO: _LIMIT 500
            GET #vwatch64_CLIENTFILE, vwatch64_BREAKPOINTBLOCK, vwatch64_BREAKPOINT
            IF vwatch64_BREAKPOINT.ACTION = vwatch64_SETNEXT THEN
                vwatch64_CHECKBREAKPOINT& = vwatch64_BREAKPOINT.LINENUMBER
                vwatch64_BREAKPOINT.ACTION = vwatch64_NEXTSTEP
                vwatch64_BREAKPOINT.LINENUMBER = 0
                PUT #vwatch64_CLIENTFILE, vwatch64_BREAKPOINTBLOCK, vwatch64_BREAKPOINT
                IF NOT _SCREENHIDE AND _DEST <> _CONSOLE THEN
                    _TITLE "Untitled": CLS
                ELSE
                    _CONSOLETITLE "Untitled": CLS
                END IF
                FirstRunDone = -1
                ON ERROR GOTO 0
                EXIT FUNCTION
            END IF
            k = _KEYHIT
            IF k = 16896 THEN vwatch64_BREAKPOINT.ACTION = vwatch64_NEXTSTEP 'F8
            IF k = -27 THEN 'ESC
                CLOSE #vwatch64_CLIENTFILE
                SYSTEM
            END IF
            _KEYCLEAR
            GOSUB vwatch64_PING
        LOOP UNTIL vwatch64_BREAKPOINT.ACTION = vwatch64_CONTINUE OR vwatch64_BREAKPOINT.ACTION = vwatch64_NEXTSTEP OR vwatch64_BREAKPOINT.ACTION = vwatch64_SETVAR OR vwatch64_BREAKPOINT.ACTION = vwatch64_SKIPSUB
        IF vwatch64_BREAKPOINT.ACTION = vwatch64_NEXTSTEP THEN StepMode = -1: StepAround = 0
        IF vwatch64_BREAKPOINT.ACTION = vwatch64_SKIPSUB THEN StartLevel = vwatch64_SUBLEVEL - 1: StepAround = -1: StepMode = -1
        IF vwatch64_BREAKPOINT.ACTION = vwatch64_SETVAR THEN
            vwatch64_CHECKBREAKPOINT& = -1
            StepMode = -1
        END IF
        IF NOT _SCREENHIDE AND _DEST <> _CONSOLE THEN
            _TITLE "Untitled": CLS
        ELSE
            _CONSOLETITLE "Untitled": CLS
        END IF
        FirstRunDone = -1
        ON ERROR GOTO 0
        VWATCH64_STARTTIMERS
        EXIT FUNCTION
    END IF

    IF (ASC(vwatch64_BREAKPOINTLIST, LineNumber) = 2) THEN
            vwatch64_CHECKBREAKPOINT& = -2
            EXIT FUNCTION
    END IF

    IF (ASC(vwatch64_BREAKPOINTLIST, LineNumber) = 1) OR (StepMode = -1) THEN
        VWATCH64_STOPTIMERS
        StepMode = -1
        DO: _LIMIT 500
            GET #vwatch64_CLIENTFILE, vwatch64_BREAKPOINTBLOCK, vwatch64_BREAKPOINT
            IF vwatch64_BREAKPOINT.ACTION = vwatch64_SETNEXT THEN
                vwatch64_CHECKBREAKPOINT& = vwatch64_BREAKPOINT.LINENUMBER
                vwatch64_BREAKPOINT.ACTION = vwatch64_NEXTSTEP
                vwatch64_BREAKPOINT.LINENUMBER = 0
                StepMode = -1
                PUT #vwatch64_CLIENTFILE, vwatch64_BREAKPOINTBLOCK, vwatch64_BREAKPOINT
                ON ERROR GOTO 0
                EXIT FUNCTION
            END IF
            k = _KEYHIT
            IF k = 16896 THEN vwatch64_BREAKPOINT.ACTION = vwatch64_NEXTSTEP 'F8
            _KEYCLEAR
            GOSUB vwatch64_PING
        LOOP UNTIL vwatch64_BREAKPOINT.ACTION = vwatch64_CONTINUE OR vwatch64_BREAKPOINT.ACTION = vwatch64_NEXTSTEP OR vwatch64_BREAKPOINT.ACTION = vwatch64_SETVAR OR vwatch64_BREAKPOINT.ACTION = vwatch64_SKIPSUB
        IF vwatch64_BREAKPOINT.ACTION = vwatch64_CONTINUE THEN StepMode = 0: StepAround = 0
        IF vwatch64_BREAKPOINT.ACTION = vwatch64_NEXTSTEP THEN StepAround = 0: StepMode = -1
        IF vwatch64_BREAKPOINT.ACTION = vwatch64_SKIPSUB THEN StartLevel = vwatch64_SUBLEVEL - 1: StepAround = -1: StepMode = -1
        IF vwatch64_BREAKPOINT.ACTION = vwatch64_SETVAR THEN
            vwatch64_CHECKBREAKPOINT& = -1
            StepMode = -1
        END IF
        VWATCH64_STARTTIMERS
    END IF

    ON ERROR GOTO 0
    EXIT FUNCTION
    vwatch64_PING:
    'Check if connection is still alive on host's end
    GET #vwatch64_CLIENTFILE, vwatch64_HEADERBLOCK, vwatch64_HEADER
    IF vwatch64_HEADER.CONNECTED = 0 THEN
        CLOSE vwatch64_CLIENTFILE
        IF FirstRunDone = 0 THEN FirstRunDone = -1: CLS: _TITLE "Untitled"
        VWATCH64_STARTTIMERS
        EXIT FUNCTION
    END IF
    RETURN
END SUB


FUNCTION vwatch64_CHECKWATCHPOINT
    DIM i AS LONG, DataType$
    GET #vwatch64_CLIENTFILE, vwatch64_WATCHPOINTLISTBLOCK, vwatch64_WATCHPOINTLIST
    FOR i = 1 TO 26
        IF ASC(vwatch64_WATCHPOINTLIST, i) = 1 THEN
            GET #vwatch64_CLIENTFILE, vwatch64_WATCHPOINTEXPBLOCK, vwatch64_WATCHPOINT()
            DataType$ = UCASE$(RTRIM$(vwatch64_VARIABLES(i).DATATYPE))
            IF INSTR(DataType$, "STRING") THEN DataType$ = "STRING"
            IF LEFT$(vwatch64_WATCHPOINT(i).VALUE, 1) = "=" THEN
                SELECT CASE DataType$
                    CASE "STRING"
                       IF RTRIM$(vwatch64_VARIABLEDATA(i).VALUE) = RTRIM$(MID$(vwatch64_WATCHPOINT(i).VALUE, 2)) THEN
                            GOTO WatchpointStop
                        END IF
                    CASE ELSE
                       IF VAL(RTRIM$(vwatch64_VARIABLEDATA(i).VALUE)) = VAL(RTRIM$(MID$(vwatch64_WATCHPOINT(i).VALUE, 2))) THEN
                           GOTO WatchpointStop
                        END IF
                END SELECT
            ELSEIF LEFT$(vwatch64_WATCHPOINT(i).VALUE, 2) = "<=" THEN
                SELECT CASE DataType$
                    CASE "STRING"
                        IF RTRIM$(vwatch64_VARIABLEDATA(i).VALUE) <= RTRIM$(MID$(vwatch64_WATCHPOINT(i).VALUE, 3)) THEN
                            GOTO WatchpointStop
                        END IF
                    CASE ELSE
                        IF VAL(RTRIM$(vwatch64_VARIABLEDATA(i).VALUE)) <= VAL(RTRIM$(MID$(vwatch64_WATCHPOINT(i).VALUE, 3))) THEN
                            GOTO WatchpointStop
                        END IF
                END SELECT
            ELSEIF LEFT$(vwatch64_WATCHPOINT(i).VALUE, 2) = ">=" THEN
                SELECT CASE DataType$
                    CASE "STRING"
                        IF RTRIM$(vwatch64_VARIABLEDATA(i).VALUE) >= RTRIM$(MID$(vwatch64_WATCHPOINT(i).VALUE, 3)) THEN
                            GOTO WatchpointStop
                        END IF
                    CASE ELSE
                        IF VAL(RTRIM$(vwatch64_VARIABLEDATA(i).VALUE)) >= VAL(RTRIM$(MID$(vwatch64_WATCHPOINT(i).VALUE, 3))) THEN
                            GOTO WatchpointStop
                        END IF
                END SELECT
            ELSEIF LEFT$(vwatch64_WATCHPOINT(i).VALUE, 2) = "<>" THEN
                SELECT CASE DataType$
                    CASE "STRING"
                        IF RTRIM$(vwatch64_VARIABLEDATA(i).VALUE) <> RTRIM$(MID$(vwatch64_WATCHPOINT(i).VALUE, 3)) THEN
                            GOTO WatchpointStop
                        END IF
                    CASE ELSE
                        IF VAL(RTRIM$(vwatch64_VARIABLEDATA(i).VALUE)) <> VAL(RTRIM$(MID$(vwatch64_WATCHPOINT(i).VALUE, 3))) THEN
                            GOTO WatchpointStop
                        END IF
                END SELECT
            ELSEIF LEFT$(vwatch64_WATCHPOINT(i).VALUE, 1) = "<" THEN
                SELECT CASE DataType$
                    CASE "STRING"
                        IF RTRIM$(vwatch64_VARIABLEDATA(i).VALUE) < RTRIM$(MID$(vwatch64_WATCHPOINT(i).VALUE, 2)) THEN
                            GOTO WatchpointStop
                        END IF
                    CASE ELSE
                        IF VAL(RTRIM$(vwatch64_VARIABLEDATA(i).VALUE)) < VAL(RTRIM$(MID$(vwatch64_WATCHPOINT(i).VALUE, 2))) THEN
                            GOTO WatchpointStop
                        END IF
                END SELECT
            ELSEIF LEFT$(vwatch64_WATCHPOINT(i).VALUE, 1) = ">" THEN
                SELECT CASE DataType$
                    CASE "STRING"
                        IF RTRIM$(vwatch64_VARIABLEDATA(i).VALUE) > RTRIM$(MID$(vwatch64_WATCHPOINT(i).VALUE, 2)) THEN
                            GOTO WatchpointStop
                        END IF
                    CASE ELSE
                        IF VAL(RTRIM$(vwatch64_VARIABLEDATA(i).VALUE)) > VAL(RTRIM$(MID$(vwatch64_WATCHPOINT(i).VALUE, 2))) THEN
                            GOTO WatchpointStop
                        END IF
                END SELECT
            END IF
        END IF
    NEXT i

    EXIT FUNCTION

   WatchpointStop:
   vwatch64_WATCHPOINTCOMMAND.ACTION = vwatch64_NEXTSTEP
   vwatch64_WATCHPOINTCOMMAND.LINENUMBER = i
   PUT #vwatch64_CLIENTFILE, vwatch64_WATCHPOINTCOMMANDBLOCK, vwatch64_WATCHPOINTCOMMAND
   vwatch64_CHECKWATCHPOINT = -1
END FUNCTION
'--------------------------------------------------------------------------------
'End of vWATCH64 procedures.
'--------------------------------------------------------------------------------
